// File location: src/app/layout.tsx
import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import Script from 'next/script';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang='en'>
      <head>
        {/* Load Voice Assistant CSS */}
        <link rel='stylesheet' href='/voice-assistant-bundle.css' />

        {/* Global Voice Assistant Button Styles */}
        <style>{`
          .voice-assistant-global-button {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 999998;
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 12px 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
            transition: all 0.3s ease;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            display: flex;
            align-items: center;
            gap: 8px;
            min-height: 44px; /* iOS recommended touch target */
            white-space: nowrap;
          }

          .voice-assistant-global-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
          }

          .voice-assistant-global-button:active {
            transform: translateY(0);
          }

          .voice-assistant-global-button.stop {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
          }

          .voice-assistant-global-button.stop:hover {
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4);
          }

          .voice-assistant-global-button.connected {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
          }

          .voice-assistant-global-button.connected:hover {
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
          }

          /* Mobile-first responsive design */
          @media (max-width: 768px) {
            .voice-assistant-global-button {
              top: 15px;
              right: 15px;
              padding: 14px 18px;
              font-size: 14px;
              min-height: 48px; /* Larger touch target for mobile */
              min-width: 48px;
              border-radius: 16px;
              box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);
              gap: 6px;
            }
            
            .voice-assistant-global-button.stop {
              box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
            }
            
            .voice-assistant-global-button.connected {
              box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);
            }
          }

          /* Extra small screens */
          @media (max-width: 480px) {
            .voice-assistant-global-button {
              top: 10px;
              right: 10px;
              padding: 12px 16px;
              font-size: 13px;
              min-height: 44px;
              border-radius: 14px;
              /* Make it more prominent on very small screens */
              box-shadow: 0 8px 25px rgba(99, 102, 241, 0.5);
            }
            
            .voice-assistant-global-button.stop {
              box-shadow: 0 8px 25px rgba(239, 68, 68, 0.5);
            }
            
            .voice-assistant-global-button.connected {
              box-shadow: 0 8px 25px rgba(16, 185, 129, 0.5);
            }
          }

          /* Ensure visibility on very small or narrow screens */
          @media (max-width: 360px) {
            .voice-assistant-global-button {
              right: 8px;
              top: 8px;
              font-size: 12px;
              padding: 10px 14px;
            }
          }

          /* High DPI displays (retina) */
          @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            .voice-assistant-global-button {
              border: 1px solid rgba(255, 255, 255, 0.1);
            }
          }
        `}</style>
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {/* Global Voice Assistant Control Button */}
        <button
          id='voice-assistant-global-btn'
          className='voice-assistant-global-button'
          style={{ display: 'none' }}
        >
          <span id='voice-btn-icon'>üé§</span>
          <span id='voice-btn-text'>Start Assistant</span>
        </button>

        {children}

        {/* Load Voice Assistant Bundle */}
        <Script src='/voice-assistant-bundle.js' strategy='afterInteractive' />

        {/* iOS Safari Fix + Voice Assistant Setup */}
        <Script id='voice-assistant-setup' strategy='afterInteractive'>
          {`
            // iOS Safari AudioContext Fix
            const PLATFORM = {
              isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,
              isSafari: /^((?!chrome|android).)*safari/i.test(navigator.userAgent),
            };
            PLATFORM.isIOSSafari = PLATFORM.isIOS && PLATFORM.isSafari;

            if (PLATFORM.isIOSSafari) {
              console.log('üçé iOS Safari: Setting up AudioContext patch');
              
              function patchUtilsForIOS() {
                if (typeof Utils !== 'undefined') {
                  console.log('üçé iOS Safari: Patching Utils.audioContext for immediate creation');

                  const originalAudioContext = Utils.audioContext;
                  Utils.audioContext = async function (options = {}) {
                    console.log('üçé iOS Safari: Utils.audioContext called - creating immediately');

                    try {
                      const context = new (window.AudioContext || window.webkitAudioContext)(options);
                      if (context.state === 'suspended') {
                        await context.resume();
                      }
                      console.log('‚úÖ iOS Safari: AudioContext created successfully via Utils override');
                      return context;
                    } catch (error) {
                      console.error('‚ùå iOS Safari: Utils.audioContext failed:', error);
                      return originalAudioContext(options);
                    }
                  };

                  console.log('‚úÖ iOS Safari: Utils.audioContext patched');
                } else {
                  setTimeout(patchUtilsForIOS, 50);
                }
              }
              
              patchUtilsForIOS();
            }

            // Global Voice Assistant State
            let isVoiceAssistantActive = false;
            let voiceAssistantStatus = 'ready'; // ready, starting, active, stopping

            // Get configuration
            function getVoiceConfig() {
              return {
                backendUrl: '${
                  process.env.NEXT_PUBLIC_VOICE_BACKEND_URL || 'wss://aiagent.babaai.live'
                }',
                theme: 'theme-dark',
                position: 'bottom-right',
                voiceName: 'Aoede',
                features: {
                  video: true,
                  screenShare: true,
                  fileUpload: true,
                  pageAccess: true,
                },
                websiteContext: {
                  name: 'My Next.js App',
                  description: 'AI-powered Next.js application with voice assistant',
                  customInstructions: 'You have access to ALL capabilities: voice, video, screen sharing, file analysis, and complete page access. Help users navigate this Next.js application effectively. Your name is Scarlett and you work for BabaAI.',
                },
              };
            }

            // Start Voice Assistant
            function startVoiceAssistant() {
              if (typeof window === 'undefined' || !window.VoiceAssistant || voiceAssistantStatus !== 'ready') {
                return;
              }

              console.log('üöÄ Starting Voice Assistant...');
              voiceAssistantStatus = 'starting';
              updateGlobalButton();

              try {
                // Stop any existing instance first
                window.VoiceAssistant.destroy();

                // Start new instance
                window.VoiceAssistant.init(getVoiceConfig());
                
                isVoiceAssistantActive = true;
                voiceAssistantStatus = 'active';
                updateGlobalButton();
                
                console.log('‚úÖ Voice Assistant started successfully');
              } catch (error) {
                console.error('‚ùå Failed to start Voice Assistant:', error);
                voiceAssistantStatus = 'ready';
                isVoiceAssistantActive = false;
                updateGlobalButton();
              }
            }

            // Stop Voice Assistant
            function stopVoiceAssistant() {
              if (typeof window === 'undefined' || !window.VoiceAssistant || voiceAssistantStatus !== 'active') {
                return;
              }

              console.log('‚èπÔ∏è Stopping Voice Assistant...');
              voiceAssistantStatus = 'stopping';
              updateGlobalButton();

              try {
                window.VoiceAssistant.destroy();
                isVoiceAssistantActive = false;
                voiceAssistantStatus = 'ready';
                updateGlobalButton();
                
                console.log('‚úÖ Voice Assistant stopped successfully');
              } catch (error) {
                console.error('‚ùå Failed to stop Voice Assistant:', error);
                voiceAssistantStatus = 'ready';
                updateGlobalButton();
              }
            }

            // Update Global Button
            function updateGlobalButton() {
              const btn = document.getElementById('voice-assistant-global-btn');
              const icon = document.getElementById('voice-btn-icon');
              const text = document.getElementById('voice-btn-text');
              
              if (!btn || !icon || !text) return;

              // Remove all status classes
              btn.classList.remove('stop', 'connected');
              
              switch (voiceAssistantStatus) {
                case 'ready':
                  icon.textContent = 'üé§';
                  text.textContent = 'Start Assistant';
                  btn.disabled = false;
                  break;
                  
                case 'starting':
                  icon.textContent = '‚è≥';
                  text.textContent = 'Starting...';
                  btn.disabled = true;
                  break;
                  
                case 'active':
                  icon.textContent = 'üî¥';
                  text.textContent = 'Stop Assistant';
                  btn.classList.add('stop');
                  btn.disabled = false;
                  break;
                  
                case 'stopping':
                  icon.textContent = '‚è≥';
                  text.textContent = 'Stopping...';
                  btn.disabled = true;
                  break;
              }
            }

            // Setup Global Button
            function setupGlobalButton() {
              const btn = document.getElementById('voice-assistant-global-btn');
              
              if (btn) {
                // Force visibility and positioning
                btn.style.display = 'flex';
                btn.style.position = 'fixed';
                btn.style.zIndex = '999998';
                btn.style.visibility = 'visible';
                btn.style.opacity = '1';
                
                // Ensure button is always on top
                btn.style.top = window.innerWidth <= 480 ? '10px' : '20px';
                btn.style.right = window.innerWidth <= 480 ? '10px' : '20px';
                
                btn.addEventListener('click', function(e) {
                  e.preventDefault();
                  e.stopPropagation();
                  
                  console.log('üé§ Global button clicked, current state:', voiceAssistantStatus);
                  
                  if (isVoiceAssistantActive) {
                    stopVoiceAssistant();
                  } else {
                    startVoiceAssistant();
                  }
                });

                // Add touch events for better mobile interaction
                btn.addEventListener('touchstart', function(e) {
                  btn.style.transform = 'scale(0.95)';
                }, { passive: true });
                
                btn.addEventListener('touchend', function(e) {
                  btn.style.transform = 'scale(1)';
                }, { passive: true });

                updateGlobalButton();
                
                console.log('‚úÖ Global voice assistant button ready');
                console.log('üì± Button position:', btn.getBoundingClientRect());
                console.log('üì± Screen size:', window.innerWidth + 'x' + window.innerHeight);
              } else {
                console.error('‚ùå Could not find voice assistant button element');
              }
            }

            // Initialize when everything is ready
            function initialize() {
              if (typeof window !== 'undefined' && window.VoiceAssistant) {
                setupGlobalButton();
              } else {
                setTimeout(initialize, 100);
              }
            }
            
            // Start initialization
            if (document.readyState === 'loading') {
              document.addEventListener('DOMContentLoaded', initialize);
            } else {
              initialize();
            }
            
            // Expose functions globally for console access
            window.startVoiceAssistant = startVoiceAssistant;
            window.stopVoiceAssistant = stopVoiceAssistant;
            
            console.log('üé§ Voice Assistant setup complete - use global button to control');
          `}
        </Script>
      </body>
    </html>
  );
}

// File location: src/app/page.tsx
export default function Home() {
  return (
    <main className='min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-blue-800 text-white'>
      <div className='container mx-auto px-4 py-8'>
        <div className='max-w-4xl mx-auto text-center'>
          <h1 className='text-4xl font-bold mb-8'>üé§ My Next.js App with Voice Assistant</h1>

          <div className='bg-white/10 backdrop-blur-lg rounded-xl p-8 border border-white/20 mb-8'>
            <p className='text-xl mb-6'>
              Click the "Start Assistant" button in the top-right corner to activate the AI voice
              assistant!
            </p>

            <div className='grid gap-6 md:grid-cols-2 lg:grid-cols-3'>
              <div className='bg-white/5 rounded-lg p-6'>
                <h3 className='font-semibold text-blue-400 mb-3'>üéôÔ∏è Voice Chat</h3>
                <p className='text-sm text-gray-300'>
                  Natural voice conversation with AI assistant
                </p>
              </div>

              <div className='bg-white/5 rounded-lg p-6'>
                <h3 className='font-semibold text-green-400 mb-3'>üìπ Video Support</h3>
                <p className='text-sm text-gray-300'>Share your camera or screen with the AI</p>
              </div>

              <div className='bg-white/5 rounded-lg p-6'>
                <h3 className='font-semibold text-purple-400 mb-3'>üìÑ Page Access</h3>
                <p className='text-sm text-gray-300'>AI can see and understand page content</p>
              </div>
            </div>
          </div>

          <div className='bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20'>
            <h2 className='text-2xl font-semibold mb-4'>How to Use</h2>
            <div className='text-left space-y-3 text-gray-300'>
              <p>1. üé§ Click "Start Assistant" button (top-right corner)</p>
              <p>2. üó£Ô∏è Allow microphone access when prompted</p>
              <p>3. üí¨ Start talking to the AI assistant</p>
              <p>4. üìπ Optional: Enable video/screen sharing during conversation</p>
              <p>5. ‚èπÔ∏è Click "Stop Assistant" when finished</p>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
