// File location: src/app/layout.tsx
import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import Script from 'next/script';
import './voice-assistant-bundle.css';
const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang='en'>
      <head>
        {/* Load Voice Assistant CSS */}
        <link rel='stylesheet' href='/voice-assistant-bundle.css' />

        {/* Global Voice Assistant Button Styles */}
        <style>{`
          .voice-assistant-global-button {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 999998;
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 12px 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
            transition: all 0.3s ease;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            display: flex;
            align-items: center;
            gap: 8px;
            min-height: 44px;
            white-space: nowrap;
          }

          .voice-assistant-global-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
          }

          .voice-assistant-global-button:active {
            transform: translateY(0);
          }

          .voice-assistant-global-button.stop {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
          }

          .voice-assistant-global-button.stop:hover {
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4);
          }

          @media (max-width: 768px) {
            .voice-assistant-global-button {
              top: 15px;
              right: 15px;
              padding: 14px 18px;
              font-size: 14px;
              min-height: 48px;
              min-width: 48px;
              border-radius: 16px;
              box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);
              gap: 6px;
            }
            
            .voice-assistant-global-button.stop {
              box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
            }
          }

          @media (max-width: 480px) {
            .voice-assistant-global-button {
              top: 10px;
              right: 10px;
              padding: 12px 16px;
              font-size: 13px;
              min-height: 44px;
              border-radius: 14px;
              box-shadow: 0 8px 25px rgba(99, 102, 241, 0.5);
            }
            
            .voice-assistant-global-button.stop {
              box-shadow: 0 8px 25px rgba(239, 68, 68, 0.5);
            }
          }
        `}</style>
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {/* Global Voice Assistant Control Button */}
        <button
          id='voice-assistant-global-btn'
          className='voice-assistant-global-button'
          style={{ display: 'none' }}
        >
          <span id='voice-btn-icon'>üé§</span>
          <span id='voice-btn-text'>Start Assistant</span>
        </button>

        {children}

        {/* Load Voice Assistant Bundle - EXACTLY like HTML demo */}
        <Script src='/voice-assistant-bundle.js' strategy='beforeInteractive' />

        {/* iOS Safari Fix + Setup - EXACTLY like HTML demo */}
        <Script id='voice-assistant-setup' strategy='beforeInteractive'>
          {`
            // EXACT COPY from your working HTML demo
            const PLATFORM = {
              isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,
              isSafari: /^((?!chrome|android).)*safari/i.test(navigator.userAgent),
            };
            PLATFORM.isIOSSafari = PLATFORM.isIOS && PLATFORM.isSafari;

            // iOS Safari AudioContext Fix - EXACT COPY from HTML
            if (PLATFORM.isIOSSafari && typeof Utils !== 'undefined') {
              console.log('üçé iOS Safari: Patching Utils.audioContext for immediate creation');

              const originalAudioContext = Utils.audioContext;
              Utils.audioContext = async function (options = {}) {
                console.log('üçé iOS Safari: Utils.audioContext called - creating immediately');

                try {
                  const context = new (window.AudioContext || window.webkitAudioContext)(options);
                  if (context.state === 'suspended') {
                    await context.resume();
                  }
                  console.log('‚úÖ iOS Safari: AudioContext created successfully via Utils override');
                  return context;
                } catch (error) {
                  console.error('‚ùå iOS Safari: Utils.audioContext failed:', error);
                  return originalAudioContext(options);
                }
              };

              console.log('‚úÖ iOS Safari: Utils.audioContext patched');
            }
          `}
        </Script>

        {/* Setup button after everything loads */}
        <Script id='voice-assistant-button-setup' strategy='afterInteractive'>
          {`
            // Voice Assistant State
            let isVoiceAssistantActive = false;

            // Get configuration - EXACT like HTML demo
            function getConfig() {
              return {
                backendUrl: '${
                  process.env.NEXT_PUBLIC_VOICE_BACKEND_URL || 'wss://aiagent.babaai.live'
                }',
                theme: 'theme-dark',
                position: 'bottom-right',
                voiceName: 'Aoede',
                features: {
                  video: true,
                  screenShare: true,
                  fileUpload: true,
                  pageAccess: true,
                },
                websiteContext: {
                  name: 'My Next.js App',
                  description: 'AI-powered Next.js application with voice assistant',
                  customInstructions: 'You have access to ALL capabilities: voice, video, screen sharing, file analysis, and complete page access. Help users navigate this Next.js application effectively. Your name is Scarlett and you work for BabaAI.',
                },
              };
            }

            // Start Assistant - EXACT like HTML demo
            function startFullDemo() {
              console.log('üöÄ Starting Full Demo...');
              stopAssistant();

              if (typeof window !== 'undefined' && window.VoiceAssistant) {
                window.VoiceAssistant.init({
                  ...getConfig()
                });
                isVoiceAssistantActive = true;
                updateButton();
              }
            }

            // Stop Assistant - EXACT like HTML demo  
            function stopAssistant() {
              console.log('‚èπÔ∏è Stopping Assistant...');
              if (typeof window !== 'undefined' && window.VoiceAssistant) {
                window.VoiceAssistant.destroy();
              }
              isVoiceAssistantActive = false;
              updateButton();
            }

            // Update button UI
            function updateButton() {
              const btn = document.getElementById('voice-assistant-global-btn');
              const icon = document.getElementById('voice-btn-icon');
              const text = document.getElementById('voice-btn-text');
              
              if (!btn || !icon || !text) return;

              if (isVoiceAssistantActive) {
                btn.classList.add('stop');
                icon.textContent = 'üî¥';
                text.textContent = 'Stop Assistant';
              } else {
                btn.classList.remove('stop');
                icon.textContent = 'üé§';
                text.textContent = 'Start Assistant';
              }
            }

            // Setup button when ready
            function setupButton() {
              const btn = document.getElementById('voice-assistant-global-btn');
              
              if (btn && typeof window !== 'undefined' && window.VoiceAssistant) {
                btn.style.display = 'flex';
                
                // DIRECT click handler - no delays, no async
                btn.onclick = function() {
                  if (isVoiceAssistantActive) {
                    stopAssistant();
                  } else {
                    startFullDemo(); // Direct call like HTML demo
                  }
                };

                updateButton();
                console.log('‚úÖ Voice Assistant button ready');
              } else {
                // Retry until both button and VoiceAssistant are ready
                setTimeout(setupButton, 50);
              }
            }

            // Start setup
            if (document.readyState === 'loading') {
              document.addEventListener('DOMContentLoaded', setupButton);
            } else {
              setupButton();
            }

            console.log('üé§ Voice Assistant Demo Ready!');
          `}
        </Script>
      </body>
    </html>
  );
}
